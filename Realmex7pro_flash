#!/bin/sh
flg4="0"
flg3="0"
flg2="0"
flg1="0"
QQ=1
experid=0
script_ver=9
experid_date=31/5/2022
rom_download_link(){
echo ""
echo -e "Maybe you need rom link."
echo -e "C:android 11, F:android 12"
echo -e "REF:https://realmefirmware.com/realme-x7-pro-5g-firmware/"
echo -e "\e[36mGobal F06 ROM link(need convert tool and use fastboot flash):\e[0m"
echo -e "http://rms01.realme.net/SW/realme%20service/realme%20X7%20Pro%205G/20660/RMX2121export_11_F.06_2022032603170488.zip"
echo -e "\e[36mGobal C06 ROM link(need convert tool and use fastboot flash):\e[0m"
echo -e "https://fileload.coloros.com/504342RMX2121export_11_C.06_2021121711130172.zip"
echo -e "\e[33mPU C03 ROM link:\e[0m"
echo -e "\e[33m(Need editor check function of /META-INF/com/google/android/updater-script file and use rec or spf tool flash\e[0m"
echo -e "https://phoenixnap.dl.sourceforge.net/project/sarthak-android-projects/d-ozip/RMX2121PU_11_OTA_10300270_all_J3fsF9l1Qrs3.zip"
echo -e "\e[32mTW C06 ROM link(need convert tool use fastboot flash, this version should rollback android 12):\e[0m"
echo -e "https://fileload.coloros.com/504343RMX2121export_11_C.06_2021121711100174.zip"
echo -e "\e[31mCN C23 to C25 ROM link(use 3rd rec flash)):\e[0m"
echo -e "https://docs.google.com/spreadsheets/d/1dTkrGBjyXIiUYYGj27Hg5wy4GZiO-jDG7c49LTX8DCk/edit?usp=sharing"
echo -e "\e[31mCN C15 ROM link(use fastboot flash, this version should rollback android 12):\e[0m"
echo -e "https://drive.google.com/drive/folders/1871KTAH6gYvziEfiLSlZx-Gd1b2vufta?usp=sharing"
echo -e "\e[31mCN C08 ROM link(use 3rd rec flash):\e[0m"
echo -e "https://otaafs-cost.coloros.com/RMX2121/RMX2121_11.C.08_10801510_202101271138/patch/CHN/RMX2121/RMX2121_11.C.08_10801510_202101271138/RMX2121_11_OTA_10801510_all_voiS7xmS7Cze_03d6cb.ozip"
echo -e "\e[31mCN C07 ROM link(use 3rd rec flash):\e[0m"
echo -e "https://otafs-cost.coloros.com/RMX2121/RMX2121_11.A.07_10701510_202012302045/patch/CHN/RMX2121/RMX2121_11.A.07_10701510_202012302045/RMX2121_11_OTA_10701510_all_cEunagN6Qwt6_9d90a14.ozip"

echo ""
recovery_download_link
echo ""
opf_covcert
echo ""
echo "Maybe you need x7 pro UI1 bootloader img."
echo -e "https://www.mediafire.com/file/y6vhxdludzq9w5h/realme_x7_pro_UI_1_bootloader.zip/file"
}

recovery_download_link(){
echo -e "Maybe you need recovery link."
echo -e "\e[32mAndroid 11 TWRP link (not support under C2x):\e[0m"
echo -e "https://github.com/zeng-github01/android_device_realme_RMX2121-twrp/releases/download/3.6.0-0/recovery.img"
echo -e "\e[32mAndroid 11 PBRP link:\e[0m"
echo -e "https://github.com/PitchBlackRecoveryProject/android_device_realme_RMX2121-pbrp/releases/download/3.1.0/recovery.img"

}

opf_covcert(){
echo -e "Maybe you need convert tool."
echo -e "\e[36mofp tool\e[0m"
echo -e "https://github.com/bkerler/oppo_decrypt"
echo -e "\e[36mozip tool\e[0m"
echo -e "https://github.com/bkerler/oppo_ozip_decrypt"
}

foldercheck_(){
printf "Directory chick...\n"
	if [[ -d ./Globalc06 || -d ./CNc15 || -d PUc03 ]];then
		echo "" > /dev/null
	else
		echo -e "\e[31mNot found folder, create folder.\e[0m"
		echo -e "\e[33mPlease put ROM img in specified path.\e[0m"
		rom_download_link


		mkdir Globalc06 && mkdir CNc15 && mkdir PUc03
		exit 1
		fi
B=`ls`
for A in $B;
do
if [[ -d $A  && "$A" == "Globalc06" ]]; then
	echo -e "\e[32m $A directory existed\e[0m"
	imgcheck_ $A
elif  [[ -d $A  && "$A" == "CNc15" ]]; then
	echo -e "\e[32m $A directory existed\e[0m"
	imgcheck_ $A
elif  [[ -d $A  && "$A" == "PUc03" ]]; then
	echo -e "\e[32m $A directory existed\e[0m"
	imgcheck_ $A
elif  [[ -d "$A" && "$A" == *RMX* ]]; then
	echo -e "\e[32m $A directory existed\e[0m"
	a=$A
	imgcheck_ $A

else
	echo "" > /dev/null
fi

done

}


imgcheck_(){
case $1 in
	PUc03)
	#echo PU
	cnimg=`ls ./PUc03 | grep "img"| wc -l`
	cnbin=`ls ./PUc03 | grep "bin"| wc -l`
	if [[ $cnimg != 0 && $cnbin != 0 ]];then
		if [[ -f ./PUc03/super.1.61441402.img && -f ./PUc03/tee.img ]];then
			echo -e "\e[32m   PUc03 version found\n\e[0m"
			flg1=1
		else
			echo "Not support version,please put in correct version."
		fi
	else
		echo -e "\e[31m＝＝＞ Not found rom img.\n\e[0m"
	fi
	cnimg=0
	cnbin=0
	;;
	Globalc06)
	#echo TW
	cnimg=`ls ./Globalc06 | grep "img"| wc -l`
	cnbin=`ls ./Globalc06 | grep "bin"| wc -l`
	if [[ $cnimg != 0 && $cnbin != 0 ]];then
		if [[ -f ./Globalc06/super.2.e0c313e9.img && -f ./Globalc06/tee.img ]];then
			echo -e "\e[32m   MYC06 version found\n\e[0m"
			flg2=1
		else
				echo "Not support version,please put in correct version."
		fi
		if [[ -f ./Globalc06/super.2.f992f79c.img && -f ./Globalc06/tee.img ]];then
			echo -e "\e[32m   TWC06 version found\n\e[0m"
			flg5=1
		else
				echo "Not support version,please put in correct version."
		fi
		if [[ -f ./Globalc06/super.2.4aaccf0e.img && -f ./Globalc06/tee.img ]];then
			echo -e "\e[32m   THC06 version found\n\e[0m"
			flg6=1
		else
				echo "Not support version,please put in correct version."
		fi		
	else
		echo -e "\e[31m＝＝＞ Not found rom img.\n\e[0m"
	fi
	
	cnimg=0
	cnbin=0
	;;
	CNc15)
	#echo CN
	cnimg=`ls ./CNc15 | grep "img"| wc -l`
	cnbin=`ls ./CNc15 | grep "bin"| wc -l`
	if [[ $cnimg != 0 && $cnbin != 0 ]];then
		#echo -e "$cnimg img file"
		#echo -e "$cnbin bin file"
		if [[ -f ./CNc15/super.1.5ab600a6.img && ./CNc15/tee.img ]];then
			echo -e "\e[32m   cn C15 version found\n\e[0m"
			flg3=1
		else
				echo "Not support version,please put in correct version."
		fi
	else
		echo -e "\e[31m＝＝＞ Not found rom img.\n\e[0m"
	fi
	cnimg=0
	cnbin=0
	;;
	$1)
	cnimg=`ls ./$1 | grep "img"| wc -l`
	if [[ $cnimg != 0 ]];then
		if [[ -f ./$1/super.img && -f ./$1/tee.img ]];then
			echo -e "\e[32m   Img found\n\e[0m"
			flg4=1
		else
				echo "Please put img under $1 folder, or put img under pu folder for your img are split rom."
		fi
	else
		echo -e "\e[31m＝＝＞ Not found rom img.\n\e[0m"
	fi
	cnimg=0
	cnbin=0
	;;
esac
}
flash_puc03(){
	if [[  $connect2 -gt 0 || $connect3 -gt 0  ]];then
		echo "Rebooting Device into Bootloader."
		adb -s $sn reboot bootloader && sleep 20
	fi
	fastboot -s $sn devices
	echo "wait 3 sec..."
	sleep 3
	fastboot -s $sn flash preloader ./PUc03/preloader_oppo6889.bin
	fastboot -s $sn flash opporeserve2 ./PUc03/opporeserve2.img
	fastboot -s $sn flash vbmeta ./PUc03/vbmeta.img
	fastboot -s $sn flash vbmeta_system ./PUc03/vbmeta_system.img
	fastboot -s $sn flash vbmeta_vendor ./PUc03/vbmeta_vendor.img
	fastboot -s $sn flash special_preload ./PUc03/special_preload.img
	fastboot -s $sn flash my_custom ./PUc03/my_custom.img
	fastboot -s $sn flash cdt_engineering ./PUc03/cdt_engineering.img
	fastboot -s $sn flash md1img ./PUc03/md1img.img
	fastboot -s $sn flash spmfw ./PUc03/spmfw.img
	fastboot -s $sn flash audio_dsp ./PUc03/audio_dsp.img
	fastboot -s $sn flash pi_img ./PUc03/pi_img.img
	fastboot -s $sn flash dpm_1 ./PUc03/dpm.img
	fastboot -s $sn flash dpm_2 ./PUc03/dpm.img
	fastboot -s $sn flash scp1 ./PUc03/scp.img
	fastboot -s $sn flash scp2 ./PUc03/scp.img
	fastboot -s $sn flash sspm_1 ./PUc03/sspm.img
	fastboot -s $sn flash sspm_2 ./PUc03/sspm.img
	fastboot -s $sn flash mcupm_1 ./PUc03/mcupm.img
	fastboot -s $sn flash mcupm_2 ./PUc03/mcupm.img
	fastboot -s $sn flash cam_vpu1 ./PUc03/cam_vpu1.img
	fastboot -s $sn flash cam_vpu2 ./PUc03/cam_vpu2.img
	fastboot -s $sn flash cam_vpu3 ./PUc03/cam_vpu3.img
	fastboot -s $sn flash gz1 ./PUc03/gz.img
	fastboot -s $sn flash gz2 ./PUc03/gz.img
	fastboot -s $sn flash lk ./PUc03/lk.img
	fastboot -s $sn flash lk2 ./PUc03/lk.img
	fastboot -s $sn flash logo ./PUc03/logo.bin
	fastboot -s $sn flash dtbo ./PUc03/dtbo.img
	fastboot -s $sn flash tee1 ./PUc03/tee.img
	fastboot -s $sn flash tee2 ./PUc03/tee.img
	fastboot -s $sn flash super ./PUc03/super.0.d23cba54.img
	fastboot -s $sn flash super ./PUc03/super.1.61441402.img
	fastboot -s $sn flash super ./PUc03/super.2.362436ac.img
	fastboot -s $sn flash boot ./PUc03/boot.img
	fastboot -s $sn flash recovery ./PUc03/recovery.img
	fastboot -s $sn flash userdata userdata.img
	fastboot -s $sn erase userdata
	sleep 1
	fastboot -s $sn reboot
}

flash_cnc15(){
	if [[  $connect2 -gt 0 || $connect3 -gt 0  ]];then
		echo "Rebooting Device into Bootloader."
		adb -s $sn reboot bootloader && sleep 20
	fi
	fastboot -s $sn devices
	echo "wait 3 sec..."
	sleep 3
	fastboot -s $sn flash preloader ./CNc15/preloader_oppo6889.bin
	fastboot -s $sn flash opporeserve2 ./CNc15/opporeserve2.img
	fastboot -s $sn flash vbmeta ./CNc15/vbmeta.img
	fastboot -s $sn flash vbmeta_system ./CNc15/vbmeta_system.img
	fastboot -s $sn flash vbmeta_vendor ./CNc15/vbmeta_vendor.img
	fastboot -s $sn flash special_preload ./CNc15/special_preload.img
	fastboot -s $sn flash my_custom ./CNc15/my_custom.img
	fastboot -s $sn flash cdt_engineering ./CNc15/cdt_engineering.img
	fastboot -s $sn flash md1img ./CNc15/md1img.img
	fastboot -s $sn flash spmfw ./CNc15/spmfw.img
	fastboot -s $sn flash audio_dsp ./CNc15/audio_dsp.img
	fastboot -s $sn flash pi_img ./CNc15/pi_img.img
	fastboot -s $sn flash dpm_1 ./CNc15/dpm.img
	fastboot -s $sn flash dpm_2 ./CNc15/dpm.img
	fastboot -s $sn flash scp1 ./CNc15/scp.img
	fastboot -s $sn flash scp2 ./CNc15/scp.img
	fastboot -s $sn flash sspm_1 ./CNc15/sspm.img
	fastboot -s $sn flash sspm_2 ./CNc15/sspm.img
	fastboot -s $sn flash mcupm_1 ./CNc15/mcupm.img
	fastboot -s $sn flash mcupm_2 ./CNc15/mcupm.img
	fastboot -s $sn flash cam_vpu1 ./CNc15/cam_vpu1.img
	fastboot -s $sn flash cam_vpu2 ./CNc15/cam_vpu2.img
	fastboot -s $sn flash cam_vpu3 ./CNc15/cam_vpu3.img
	fastboot -s $sn flash gz1 ./CNc15/gz.img
	fastboot -s $sn flash gz2 ./CNc15/gz.img
	fastboot -s $sn flash lk ./CNc15/lk.img
	fastboot -s $sn flash lk2 ./CNc15/lk.img
	fastboot -s $sn flash logo ./CNc15/logo.bin
	fastboot -s $sn flash dtbo ./CNc15/dtbo.img
	fastboot -s $sn flash tee1 ./CNc15/tee.img
	fastboot -s $sn flash tee2 ./CNc15/tee.img
	fastboot -s $sn flash super ./CNc15/super.0.ad887076.img
	fastboot -s $sn flash super ./CNc15/super.1.5ab600a6.img
	fastboot -s $sn flash super ./CNc15/super.2.ce0fab33.img
	fastboot -s $sn flash boot ./CNc15/boot.img
	fastboot -s $sn flash recovery ./CNc15/recovery.img
	fastboot -s $sn flash userdata ./CNc15/userdata.img
	fastboot -s $sn erase userdata
	sleep 1
	fastboot -s $sn reboot
}

flash_globalc06(){
	if [[  $connect2 -gt 0 || $connect3 -gt 0  ]];then
		echo "Rebooting Device into Bootloader."
		adb -s $sn reboot bootloader && sleep 20
	fi
	fastboot -s $sn devices
	echo "wait 3 sec..."
	sleep 3
	fastboot -s $sn flash preloader ./Globalc06/preloader_oppo6889.bin
	fastboot -s $sn flash opporeserve2 ./Globalc06/opporeserve2.img
	fastboot -s $sn flash vbmeta ./Globalc06/vbmeta.img
	fastboot -s $sn flash vbmeta_system ./Globalc06/vbmeta_system.img
	fastboot -s $sn flash vbmeta_vendor ./Globalc06/vbmeta_vendor.img
	fastboot -s $sn flash special_preload ./Globalc06/special_preload.img
	fastboot -s $sn flash my_custom ./Globalc06/my_custom.img
	fastboot -s $sn flash cdt_engineering ./Globalc06/cdt_engineering.img
	fastboot -s $sn flash md1img ./Globalc06/md1img.img
	fastboot -s $sn flash spmfw ./Globalc06/spmfw.img
	fastboot -s $sn flash audio_dsp ./Globalc06/audio_dsp.img
	fastboot -s $sn flash pi_img ./Globalc06/pi_img.img
	fastboot -s $sn flash dpm_1 ./Globalc06/dpm.img
	fastboot -s $sn flash dpm_2 ./Globalc06/dpm.img
	fastboot -s $sn flash scp1 ./Globalc06/scp.img
	fastboot -s $sn flash scp2 ./Globalc06/scp.img
	fastboot -s $sn flash sspm_1 ./Globalc06/sspm.img
	fastboot -s $sn flash sspm_2 ./Globalc06/sspm.img
	fastboot -s $sn flash mcupm_1 ./Globalc06/mcupm.img
	fastboot -s $sn flash mcupm_2 ./Globalc06/mcupm.img
	fastboot -s $sn flash cam_vpu1 ./Globalc06/cam_vpu1.img
	fastboot -s $sn flash cam_vpu2 ./Globalc06/cam_vpu2.img
	fastboot -s $sn flash cam_vpu3 ./Globalc06/cam_vpu3.img
	fastboot -s $sn flash gz1 ./Globalc06/gz.img
	fastboot -s $sn flash gz2 ./Globalc06/gz.img
	fastboot -s $sn flash lk ./Globalc06/lk.img
	fastboot -s $sn flash lk2 ./Globalc06/lk.img
	fastboot -s $sn flash logo ./Globalc06/logo.bin
	fastboot -s $sn flash dtbo ./Globalc06/dtbo.img
	fastboot -s $sn flash tee1 ./Globalc06/tee.img
	fastboot -s $sn flash tee2 ./Globalc06/tee.img
	if [[ $1 == "tw" ]];then
		fastboot -s $sn flash super ./Globalc06/super.0.4963b3cf.img
		fastboot -s $sn flash super ./Globalc06/super.1.48eb2998.img
		fastboot -s $sn flash super ./Globalc06/super.2.f992f79c.img
	elif [[ $1 == "my" ]];then
		echo "my~"
		fastboot -s $sn flash super ./Globalc06/super.0.4963b3cf.img
		fastboot -s $sn flash super ./Globalc06/super.1.48eb2998.img
		fastboot -s $sn flash super ./Globalc06/super.2.e0c313e9.img
	else
		echo "th~"
		fastboot -s $sn flash super ./Globalc06/super.0.4963b3cf.img
		fastboot -s $sn flash super ./Globalc06/super.1.48eb2998.img
		fastboot -s $sn flash super ./Globalc06/super.2.4aaccf0e.img
	fi
	fastboot -s $sn flash boot ./Globalc06/boot.img
	fastboot -s $sn flash recovery ./Globalc06/recovery.img
	fastboot -s $sn flash userdata ./Globalc06/userdata.img
	fastboot -s $sn erase userdata
	sleep 1
	fastboot -s $sn reboot
}
goflash(){
case $1 in
	pu)
		flash_puc03
	;;
	my | tw | th )
		flash_globalc06 $1
	;;
	cn)
		flash_cnc15
	;;
	$choise)
	product_UIversion=$choise
	echo "Rebooting Device into Bootloader."
	adb -s $sn reboot bootloader && sleep 20
	fastboot -s $sn devices
	sleep 3
	fastboot -s $sn flash preloader ./$product_UIversion/preloader_oppo6889.bin
	fastboot -s $sn flash opporeserve2 ./$product_UIversion/opporeserve2.img
	fastboot -s $sn flash vbmeta ./$product_UIversion/vbmeta.img
	fastboot -s $sn flash vbmeta_system ./$product_UIversion/vbmeta_system.img
	fastboot -s $sn flash vbmeta_vendor ./$product_UIversion/vbmeta_vendor.img
	fastboot -s $sn flash special_preload ./$product_UIversion/special_preload.img
	fastboot -s $sn flash my_custom ./$product_UIversion/my_custom.img
	fastboot -s $sn flash cdt_engineering ./$product_UIversion/cdt_engineering.img
	fastboot -s $sn flash md1img ./$product_UIversion/md1img.img
	fastboot -s $sn flash spmfw ./$product_UIversion/spmfw.img
	fastboot -s $sn flash audio_dsp ./$product_UIversion/audio_dsp.img
	fastboot -s $sn flash pi_img ./$product_UIversion/pi_img.img
	fastboot -s $sn flash dpm_1 ./$product_UIversion/dpm.img
	fastboot -s $sn flash dpm_2 ./$product_UIversion/dpm.img
	fastboot -s $sn flash scp1 ./$product_UIversion/scp.img
	fastboot -s $sn flash scp2 ./$product_UIversion/scp.img
	fastboot -s $sn flash sspm_1 ./$product_UIversion/sspm.img
	fastboot -s $sn flash sspm_2 ./$product_UIversion/sspm.img
	fastboot -s $sn flash mcupm_1 ./$product_UIversion/mcupm.img
	fastboot -s $sn flash mcupm_2 ./$product_UIversion/mcupm.img
	fastboot -s $sn flash cam_vpu1 ./$product_UIversion/cam_vpu1.img
	fastboot -s $sn flash cam_vpu2 ./$product_UIversion/cam_vpu2.img
	fastboot -s $sn flash cam_vpu3 ./$product_UIversion/cam_vpu3.img
	fastboot -s $sn flash gz1 ./$product_UIversion/gz.img
	fastboot -s $sn flash gz2 ./$product_UIversion/gz.img
	fastboot -s $sn flash lk ./$product_UIversion/lk.img
	fastboot -s $sn flash lk2 ./$product_UIversion/lk.img
	fastboot -s $sn flash logo ./$product_UIversion/logo.bin
	fastboot -s $sn flash dtbo ./$product_UIversion/dtbo.img
	fastboot -s $sn flash tee1 ./$product_UIversion/tee.img
	fastboot -s $sn flash tee2 ./$product_UIversion/tee.img
	echo "Rebooting Device into Userspace Fastboot"
	fastboot -s $sn reboot fastboot && sleep 20
	fastboot -s $sn devices
	sleep 3
	fastboot -s $sn flash super ./$product_UIversion/super.img
	echo "Rebooting Device into Bootloader."
	adb -s $sn reboot bootloader && sleep 20
	fastboot -s $sn devices
	sleep 3
	fastboot -s $sn flash boot ./$product_UIversion/boot.img
	fastboot -s $sn flash recovery ./$product_UIversion/recovery.img
	#fastboot -s $sn flash userdata ./$product_UIversion/userdata.img
	fastboot -s $sn erase userdata
	sleep 1
	fastboot -s $sn reboot
	;;
esac
}

flash_rom(){
if [[ $flg1 == "0" &&  $flg2 == "0" && $flg3 == "0" &&  $flg4 == "0" ]];then
	echo -e "\e[33mNot found Rom img, please put img in specified path.\e[0m"
	rom_download_link
	#exit 1
else
	echo "What's version you want to flash ?"
	
	echo "-----"
	if [[ $flg1 == "1" ]] ;then
		echo "PU"
	fi
	if [[ $flg2 == "1" ]] ;then
		echo "MY"
	fi
	if [[ $flg3 == "1" ]] ;then
		echo "CN"
	fi
	if [[ $flg4 == "1" ]] ;then
		ls | grep RMX
	fi
	if [[ $flg5 == "1" ]] ;then
		echo "TW"
	fi
	if [[ $flg6 == "1" ]] ;then
		echo "TH"
	fi
	echo "-----"
	read -p "Version: " choise
	if [[ $choise == "pu" || $choise == "PU" || $choise == "Pu" || $choise == "pU" ]] ;then
		goflash pu
		echo -e "\e[32mDone\e[0m"
		echo "wait about 3 minutes go into OS"
	elif [[ $choise == "tw" || $choise == "TW" || $choise == "Tw" || $choise == "tW" ]] ;then
		goflash tw
		echo -e "\e[32mDone\e[0m"
		echo "wait about 3 minutes go into OS"
	elif [[ $choise == "th" || $choise == "TH" || $choise == "Th" || $choise == "tH" ]] ;then
		goflash th
		echo -e "\e[32mDone\e[0m"
		echo "wait about 3 minutes go into OS"
	elif [[ $choise == "my" || $choise == "MY" || $choise == "My" || $choise == "mY" ]] ;then
		goflash my
		echo -e "\e[32mDone\e[0m"
		echo "wait about 3 minutes go into OS"
	elif [[ $choise == "cn" || $choise == "CN" || $choise == "Cn" || $choise == "cN" ]] ;then
		goflash cn
		echo -e "\e[32mDone\e[0m"
		echo "wait about 3 minutes go into OS"
	elif [[ -d $choise ]] ;then
		imgcheck_ $choise
		goflash $choise		
		echo -e "\e[32mDone\e[0m"
		echo "wait about 3 minutes go into OS"
	else
		echo -e "\e[31mInput error.\n\e[0m"
	fi
fi

}

backup_all_img(){
Mybackup_folder="${product_UIversion}_backup_img"
if [[ -d ./$Mybackup_folder ]]; then
	echo -e "\e[32m $Mybackup_folder directory existed.\e[0m"
	echo "Userdata partitions not backup."
else
	echo -e "\e[31mNot found folder, create folder.\e[0m"
	mkdir $Mybackup_folder
	
fi
echo "wait..."
sleep 2
total=`adb -s $sn shell ls /dev/block/by-name/ | wc -l`
echo "Total $total partitions"
i=$(adb -s $sn shell ls /dev/block/by-name/)
c=1
for i in $i
do
	echo "$c. $i found"
	sleep 1
	if [[ $i = userdata || $i = sda || $i = sdb || $i = sdc || $i = sdd || $i = sde || $i = sdf ]]; then
		echo " ===> skip"
		c=$(($c+1))		
	else
		adb -s $sn shell "su -c 'dd if=/dev/block/by-name/$i of=/sdcard/$i.img'" > /dev/null
		adb -s $sn pull /sdcard/$i.img ./$Mybackup_folder > /dev/null
		#echo "adb -s $sn shell dd if=/dev/block/by-name/$i of=$Mybackup_folder/$i.img"
		echo -e "\e[32mcompleted\e[0m"
		c=$(($c+1))
		sleep 1
		adb -s $sn shell rm /sdcard/$i.img
	fi
	i=""
done

size=`du -h ./$Mybackup_folder | awk '{print $1}'`
echo "Files saved in $Mybackup_folder folder, size:$size"
echo -e  "\e[32mDone\e[0m"

}

backup_boot_recovery_vbmeta(){
Mybackup_folder="${product_UIversion}_official_img_backup"
echo "Dump boot,recovery and vbmeta in $Mybackup_folder folder."
if [[ -d ./$Mybackup_folder ]]; then
	echo -e "\e[32m$Mybackup_folder directory existed.\e[0m"

else
	echo -e "\e[31mNot found folder, create $Mybackup_folder folder.\e[0m"
	mkdir $Mybackup_folder
	
fi
echo "Dump img..."

if [[ -f ./$Mybackup_folder/boot.img && -f ./$Mybackup_folder/recovery.img && -f ./$Mybackup_folder/vbmeta.img ]] ;then
	echo -e "\e[32mboot,recovery and vbmeta img were found ==> skip dump.\e[0m"
else
	adb -s $sn shell dd if=/dev/block/by-name/boot of=/sdcard/boot.img 2> /dev/null 
	adb -s $sn pull /sdcard/boot.img ./$Mybackup_folder 2> /dev/null 
	sleep 1
	adb -s $sn shell dd if=/dev/block/by-name/recovery of=/sdcard/recovery.img 2> /dev/null 
	adb -s $sn pull /sdcard/recovery.img ./$Mybackup_folder 2> /dev/null
	sleep 1
	adb -s $sn shell dd if=/dev/block/by-name/vbmeta of=/sdcard/vbmeta.img 2> /dev/null 
	adb -s $sn pull /sdcard/vbmeta.img ./$Mybackup_folder 2> /dev/null 
	sleep 1
	echo -e "\e[32mDump completed.\e[0m"
fi


}

clone_image(){
Mybackup_folder="$product_UIversion"
if [[ -d ./$Mybackup_folder ]]; then
	echo -e "\e[32m$Mybackup_folder directory existed\e[0m"
else
	echo -e "\e[31mNot found folder, create folder.\e[0m"
	mkdir $Mybackup_folder
	echo -e "\e[32$product_UIversion folder created.\e[0m"
	
fi
total=`adb -s $sn shell ls /dev/block/by-name/ | wc -l`
echo "Total $total partitions."
echo "Collect the necessary partitions..."
iii=$(adb -s $sn shell ls /dev/block/by-name/)
c=1
for i in $iii
do	
	if [[ $i = audio_dsp || $i = boot || $i = cam_vpu1 || \
	$i = cam_vpu2 || $i = cam_vpu3 || $i = cdt_engineering || \
	$i = dpm_1 || $i = dtbo || $i = gz1 || \
	$i = lk || $i = logo || $i = mcupm_1 || \
	$i = md1img || $i = my_custom || $i = opporeserve2 || \
	$i = pi_img || $i = preloader_a || $i = recovery || \
	$i = scp1 || $i = special_preload || $i = spmfw || \
	$i = sspm_1 || $i = super || $i = tee1 || \
	$i = vbmeta || $i = vbmeta_system || $i = vbmeta_vendor ]]; then
		echo "$c. $i found"
		sleep 1
		ii=""
		if [[ $i = dpm_1 ]]; then
			ii=`echo $i |sed 's/dpm_1/dpm/g'`
			echo "rename and saved $ii"
			adb -s $sn shell "su -c 'dd if=/dev/block/by-name/$i of=/sdcard/$ii.img'" 2> /dev/null
			adb -s $sn pull /sdcard/$ii.img ./$Mybackup_folder > /dev/null
			adb -s $sn shell rm /sdcard/$ii.img
			#du -sh ./$Mybackup_folder | awk '{print $1}'
		elif [[ $i = preloader_a ]]; then
			ii=`echo $i |sed 's/preloader_a/preloader/g'`
			echo "rename and saved $ii"
			adb -s $sn shell "su -c 'dd if=/dev/block/by-name/$i of=/sdcard/preloader_oppo6889.bin'" 2> /dev/null
			adb -s $sn pull /sdcard/$preloader_oppo6889.bin ./$Mybackup_folder > /dev/null
			adb -s $sn shell rm /sdcard/preloader_oppo6889.bin
		elif [[ $i = gz1 ]]; then
			ii=`echo $i |sed 's/gz1/gz/g'`
			echo "rename and saved $ii"
			adb -s $sn shell "su -c 'dd if=/dev/block/by-name/$i of=/sdcard/$ii.img'" 2> /dev/null
			adb -s $sn pull /sdcard/$ii.img ./$Mybackup_folder > /dev/null
			adb -s $sn shell rm /sdcard/$ii.img
			#du -sh ./$Mybackup_folder/$ii.img | awk '{print $1}'
		elif [[ $i = mcupm_1 ]]; then
			ii=`echo $i |sed 's/mcupm_1/mcupm/g'`
			echo "rename and saved $ii"
			adb -s $sn shell "su -c 'dd if=/dev/block/by-name/$i of=/sdcard/$ii.img'" 2> /dev/null
			adb -s $sn pull /sdcard/$ii.img ./$Mybackup_folder > /dev/null
			adb -s $sn shell rm /sdcard/$ii.img
			#du -sh ./$Mybackup_folder/$ii.img | awk '{print $1}'
		elif [[ $i = scp1 ]]; then
			ii=`echo $i |sed 's/scp1/scp/g'`
			echo "rename and saved $ii"
			adb -s $sn shell "su -c 'dd if=/dev/block/by-name/$i of=/sdcard/$ii.img'" 2> /dev/null
			adb -s $sn pull /sdcard/$ii.img ./$Mybackup_folder > /dev/null
			adb -s $sn shell rm /sdcard/$ii.img
			#du -sh ./$Mybackup_folder/$ii.img | awk '{print $1}'
		elif [[ $i = sspm_1 ]]; then
			ii=`echo $i |sed 's/sspm_1/sspm/g'`
			echo "rename and saved $ii"
			adb -s $sn shell "su -c 'dd if=/dev/block/by-name/$i of=/sdcard/$ii.img'" 2> /dev/null
			adb -s $sn pull /sdcard/$ii.img ./$Mybackup_folder > /dev/null
			adb -s $sn shell rm /sdcard/$ii.img
			#du -sh ./$Mybackup_folder/$ii.img | awk '{print $1}'
		elif [[ $i = tee1 ]]; then
			ii=`echo $i |sed 's/tee1/tee/g'`
			echo "rename and saved $ii"
			adb -s $sn shell "su -c 'dd if=/dev/block/by-name/$i of=/sdcard/$ii.img'" 2> /dev/null
			adb -s $sn pull /sdcard/$ii.img ./$Mybackup_folder > /dev/null
			adb -s $sn shell rm /sdcard/$ii.img
			#du -sh ./$Mybackup_folder/$ii.img | awk '{print $1}'
		elif [[ $i = super ]]; then
			echo "The img is bigger, wait..."
			adb -s $sn shell dd "su -c 'if=/dev/block/by-name/$i of=/sdcard/$i.img'" 2> /dev/null
			adb -s $sn pull /sdcard/$i.img ./$Mybackup_folder > /dev/null
			adb -s $sn shell rm /sdcard/$i.img
		elif [[ $i = logo ]]; then
			adb -s $sn shell "su -c 'dd if=/dev/block/by-name/$i of=/sdcard/$i.bin'" 2> /dev/null
			adb -s $sn pull /sdcard/$i.bin ./$Mybackup_folder > /dev/null
			adb -s $sn shell rm /sdcard/$i.bin	
		else
			adb -s $sn shell "su -c 'dd if=/dev/block/by-name/$i of=/sdcard/$i.img'" 2> /dev/null
			adb -s $sn pull /sdcard/$i.img ./$Mybackup_folder > /dev/null
			adb -s $sn shell rm /sdcard/$i.img
			#echo "$i"
		fi
		echo -e "\e[32mcompleted\e[0m"
		c=$(($c+1))
		
		
	else
		echo " ===> skip" >/dev/null
		
	fi
	sleep 1
done
size=`du -h ./$Mybackup_folder | awk '{print $1}'`
echo "Files saved in $Mybackup_folder folder, size:$size"
echo -e  "\e[32mDone\e[0m"

}

flash_recovery(){
ls | grep recovery
list=`ls | grep recovery`
if [[ $list == "" ]];then
	recovery_download_link
	echo "please put img in this folder"		
else
	read -p "What's recovery use ?(q button:exit) : " used_recovery
	if [[ -f ./$used_recovery ]];then
	
		echo -e "\nRestart bootloader..."
		adb -s $sn reboot bootloader && sleep 20
		fastboot -s $sn devices
		sleep 3
		echo -e "Flash recovery..."
		fastboot -s $sn flash recovery ./$used_recovery 2> /dev/null 
		echo -e "Restart recovery..."
		fastboot -s $sn reboot recovery 2> /dev/null 
		echo -e "wait..."
		sleep 40
		
		backup_boot_recovery_vbmeta
		#echo -e "Restart bootloader..."
		#adb -s $sn reboot bootloader && sleep 20
		#echo -e "Disable AVB2.0..."
		#fastboot -s $sn --disable-verity --disable-verification flash vbmeta \
		#./$Mybackup_folder/vbmeta.img > /dev/null 
		#fastboot reboot
		echo -e "\e[32mDone.\e[0m"
	elif [[ $used_recovery == "q" || $used_recovery == "Q" ]];then
		echo -e "\e[33mExit flash recovery mode.\e[0m"
	else
		echo -e "\n"
		recovery_download_link
		echo "please put img in this folder"	
	fi


fi

}

flash_fastboot(){
if [[ -f ./bootloader.emmc.win && ./bootloader2.emmc.win ]];then
	echo -e "Restart fastbootd..."
	adb -s $sn reboot fastboot && sleep 20
	fastboot -s $sn devices
	sleep 3
	fastboot -s $sn flash bootloader bootloader.emmc.win
	fastboot -s $sn flash bootloader2 bootloader2.emmc.win
	sleep 1
	fastboot -s $sn reboot bootloader
	sleep 3
	echo -e "\e[32mDone \e[0m"
else
	echo -e "\e[31mPlease put in bootloader.emmc.win and bootloader2.emmc.win file in this folder\e[0m"
	echo "Maybe you need x7 pro bootloader img."
	echo -e "\e[32mhttps://drive.google.com/drive/folders/1N-tXSi_xeIzI7-sU2HMWjK4BLJxi82vt?usp=sharing\e[0m"
fi	

}

backup_userdata(){
which ls
path1=/data/data
	#數據目錄
	path="/data/media/0/Android"
	path2="/data/user/0"

}

partition_info() {
	Occupation_status="$(df -h "${Backup%/*}" | sed -n 's|% /.*|%|p' | awk '{print $(NF-1),$(NF)}')"
	result="$(echo "$Occupation_status" | awk '{print $2}' | sed 's/%//g')"
}

phoneinfo()
{
	market_name=`adb -s $sn shell getprop ro.oppo.market.name`
	ui_version=`adb -s $sn shell getprop ro.build.version.realmeui`
	odm=`adb -s $sn shell getprop ro.product.odm.device`
	band=`adb -s $sn shell getprop gsm.version.baseband`
	vendor_rom=`adb -s $sn shell getprop ro.vendor.build.id`
	product_build=`adb -s $sn shell getprop ro.product.build.id`
	product_UIversion=`adb -s $sn shell getprop ro.build.display.id`
	vendor_rom_OS=`adb -s $sn shell getprop ro.build.version.release`
	battery_level=`adb -s $sn shell dumpsys battery| grep level | sed 's/^.*level: //g'`

}

phone_info_out(){
	printf "Check root:"
	echo -e "\e[32m$check_root \e[0m"
	if [[ $market_name == ""  ]];then
		market_name=`adb -s $sn shell getprop ro.vendor.oplus.market.name`
	fi
	printf "Market name:"
	echo -e "\e[32m$market_name \e[0m"
	printf "Android OS:"
	echo -e "\e[32m$vendor_rom_OS \e[0m"
	printf "odm:"
	echo -e "\e[32m$odm \e[0m"
	printf "band:"
	echo -e "\e[32m$band \e[0m"
	if [[ $ui_version != ""  ]];then
		printf "realmeUI:"
		echo -e "\e[32m$ui_version \e[0m"
		printf "Vender ROM:"
		echo -e "\e[32m$product_UIversion \e[0m"
	else
		printf "Vender ROM:"
		echo -e "\e[32m$vendor_rom \e[0m"
	fi	
	printf "System ROM:"
	echo -e "\e[32m$product_build \e[0m"
	printf "Phone battery:"
	echo -e "\e[32m$battery_level% \e[0m"

}
myhelp(){
mytitle
echo -e "--backup, -B"
echo -e "	Backup phone partitions and userdata partition not backup."
echo -e "--clone, -C"
echo -e "	Clone OS version of realmeUI2."
echo -e "--info, -D"
echo -e "	Show phone information."
echo -e "--flashfs, -FF"
echo -e "	Try fix phone fastboot."
echo -e "--flashos, -FO"
echo -e "	Flash realmeUI2 mode."
echo -e "--flashrc, -R"
echo -e "	Flash recovery mode."
echo -e "--link, -L"
echo -e "	Show some img or tool link."
echo -e "--pkg, -P"
echo -e "	Show Color os ota path."
echo -e "--boot, -b"
echo -e "	Recovery official boot\n"
if [[ $experid == "1" && "$QQ" == "1" ]] ;then
	echo -e "                                                     QQ號：2518583418"
fi
echo -e "                                                                Ver:$script_ver"
echo -e "                                                     Author:skysumbra\n"
}

mytitle(){

echo -e "\t\t Realme X7 Pro fastboot flash Tool"
echo
echo -e "--------Please check usb debugging enable and fastboot unlock--------"
echo -e "This Tool for realme android 11 after or rariants custom 11 after"
echo -e "    ----Please put rom img file under pu, tw or cn folder----"
echo -e "\e[33mPU:Free and Open Indo-Pacific used UI2 c06 version\e[0m"
echo -e "    https://www.realme.com/in/realme-x7-pro/specs"
echo -e "\e[32mTW:Republic of China (Taiwan) used UI2 c06 version\e[0m"
echo -e "    https://www.realme.com/tw/realme-x7-pro/specs"
echo -e "\e[31mCN:People's Republic of China used UI2 c15 version\e[0m"
echo -e "    https://www.realme.com/cn/realme-x7-pro/specs"
echo -e ""
echo -e "If want to flash other people prepare UI2 version,"
echo -e "please create RMX2121_11_C.xx folder"
if [[ $experid == "1" && "$QQ" == "1" ]] ;then
	echo -e "                               the script will be expire on $experid_date"
	echo -e "						     QQ號：2518583418"
else
	echo -e "" > /dev/null
fi
echo -e "                                                                Ver:$script_ver"
echo -e "                                                     Author:skysumbra\n"

}
check_model(){
echo -e "\e[33mStart tool time：\033[1;36m`date '+%d-%m-%Y %H:%M:%S'`\e[0m"
	connect1=`fastboot devices | grep fastboot | awk '{print $1}'| wc -l`
	connect2=`adb devices | grep device | awk 'NR!=1 {print $1}'| wc -l`
	connect3=`adb devices | grep recovery | awk '{print $1}'| wc -l`
	
	if [[ $connect2 -gt 0 || $connect3 -gt 0 ]] ;then
		adb devices
		read -p "SN: " sn
		device=`adb -s $sn shell getprop ro.product.device`
		if [[ $device == "RMX2121" || $device == "RMX2121CN" || $device == "RMX2121TW" || $device == "RMX2121L1" || $device == "RMX2121PU" ]];then
			vendor_rom_OS=`adb -s $sn shell getprop ro.build.version.release`
		if [[ $vendor_rom_OS -le 10 ]];then
			echo -e "\e[31mYour device OS not support,please manually update to android  11.\n\e[0m"
			echo -e "\e[31m你的裝置系統不支持，請手動更新系統版本至android 11。\n\e[0m"
			exit 1
		fi
	else
		echo -e "\e[33mModel is not match,exit.\e[0m"
		exit 1
	fi
		
		if [[ `adb -s $sn shell which su` == "" ]];then
			check_root="not root"
		elif [[ `adb -s $sn shell "su -c 'whoami'"` == "root" ]];then
			check_root="rooted"
		else
			check_root="not root"
		fi
		phoneinfo $sn
	elif [[  $connect1 -gt 0 ]] ;then
		fastboot devices
		read -p "SN(q button:exit): " sn
		if [[ $sn == "q" || $sn == "Q" ]];then
			echo -e "\e[33mExit\e[0m"
			exit 1
		fi
		main
	else 
		echo -e "\e[33mPC doesn't connect device.\e[0m"
		exit 1
		
	fi
}

ota_path(){
	echo "OTA link path"
	echo -e "\e[32mUI 1.0\e[0m"
	echo "DB:/data/data/com.oppo.ota/databases/"
	echo "ROM:/data/oppo/coloros/OTA/.otaPackage/"
	echo -e "\e[32mUI 2.0\e[0m"
	echo "DB:/data/data/com.oppo.ota/databases/"
	echo "ROM:/data/ota_package/"
	echo -e "\e[32mUI 3.0\e[0m"
	echo "DB:/data/data/com.oplus.ota/databases/"
	echo "ROM:/data/ota_package/OTA/.otaPackage/"
}

flash_official_boot(){
if [[ -d ./${product_UIversion}_official_img_backup && -f ./${product_UIversion}_official_img_backup/boot.img && -f ./${product_UIversion}_official_img_backup/vbmeta.img ]]; then
	echo "Recovery official boot"
	echo -e "Restart fastboot..."
	adb -s $sn reboot bootloader && sleep 20
	fastboot -s $sn devices
	sleep 1
	fastboot -s $sn flash vbmeta ./${product_UIversion}_official_img_backup/vbmeta.img  2> /dev/null 
	fastboot -s $sn flash boot ./${product_UIversion}_official_img_backup/boot.img 2> /dev/null
	fastboot -s $sn reboot 2> /dev/null
	echo -e "\e[32mDone \e[0m"
else
	echo -e "\e[31mNot found rom ${product_UIversion}_official_img_backup folder or boot vbmeta img.\e[0m"
	exit 1
	
fi

}

ADBandfastboot_check(){
localadb=`which adb | wc -L`
localfastboot=`which adb | wc -L`

if [[ $localadb != "" ]];then
	adb --version
else
	echo "Not found ADB tool"
	echo "Do you not install or set global variable ?"
	exit 1
fi
if [[ $localfastboot != "" ]];then
	fastboot --version
else
	echo "Not found Fastboot tool"
	echo "Do you not install or set global variable ?"
	exit 1
fi
}
maintop(){
clear
ADBandfastboot_check
mytitle
check_model
phone_info_out
main
}

main(){
foldercheck_

while [[ true ]]
do
	echo -e "==========================="
	echo -e "1.Flash rom"
	echo -e "2.Backup partitions (need root)"
	echo -e "3.Clone OS version of realmeUI(need root)"
	echo -e "4.Flash recovery"
	echo -e "5.Flash fastboot(try fix)"
	read -p "What are you going to do?(q button:exit) " choise
	
	if [[ $choise == q || $choise == Q ]];then
		echo -e "\e[33mExit\e[0m"
		exit 1
	elif [[ $choise == "1" ]];then
		flash_rom
	elif [[ $choise == "2" ]];then
		backup_all_img
	elif [[ $choise == "3" ]];then
		clone_image
		echo -e "\e[33mPlease rember to change folder name.\e[0m"
	elif [[ $choise == "4" ]];then
		flash_recovery
	elif [[ $choise == "5" ]];then
		flash_fastboot
	elif [[ $choise == "6" ]];then
		backup_userdata
	else
		echo -e "\e[31mInput error\e[0m"
	fi
	#Mybackup_folder=""
	#product_UIversion=""
	 
done
}

if [ -z "$1" ];then	
	maintop
else
	if [[ "$1" == "" || "$1" == "-h" || "$1" == "--h" || "$1" == "-help" ]];then
		clear
		myhelp
		rom_download_link
	elif [[ "$1" == "--info" || "$1" == "-I" ]];then
		check_model
		phone_info_out
	elif [[ "$1" == "--flashos" || "$1" == "-FO" ]];then
		check_model
		foldercheck_
		flash_rom
	elif [[ "$1" == "--backup" || "$1" == "-B" ]];then
		check_model
		backup_all_img
	elif [[ "$1" == "--clone" || "$1" == "-C" ]];then
		check_model
		clone_image
		echo -e "\e[33mPlease remeber to change folder name.\e[0m"
	elif [[ "$1" == "--flashre" || "$1" == "-R" ]];then
		check_model
		flash_recovery
	elif [[ "$1" == "--flashfs" || "$1" == "-FF" ]];then
		check_model
		flash_fastboot
	elif [[ "$1" == "--link" || "$1" == "-L" ]];then
		rom_download_link
	elif [[ "$1" == "--pkg" || "$1" == "-P" ]];then
		ota_path
	elif [[ "$1" == "--boot" || "$1" == "-b" ]];then
		check_model
		flash_official_boot
		
	else
		clear
		myhelp
		rom_download_link
	fi
fi
